(use-modules 
 (ice-9 rdelim)
 (ice-9 optargs)
 (ice-9 getopt-long)
 (experiment)
 (experiment-transition)
 (guile-user)
 (eval-robot)
 (emacsy emacsy)
 (system repl error-handling)
 (mathematica-aux)
 )

(format #t "args ~a~%" (program-arguments))

(define args (program-arguments))
(define argc (length args))

(define option-spec
  '((physics (single-char #\p) (value #t))
    (help    (single-char #\h) (value #f))
    (sandwich (single-char #\s) (value #t))
    (sandwich-outfile (single-char #\o) (value #t))
    (sandwich-random (single-char #\r) (value #t))
    (quit (single-char #\q) (value #f))))

(define (usage)
  (format (current-error-port) "usage: ~a [-q] [-p physics-class] [-s sandwich] [-o sandwich-out] [-r sandwich-random] <experiment.dat>~%" (car (program-arguments))))

(define options (getopt-long args option-spec #:stop-at-first-non-option #t))

(define expmt #f)

(define (substitute-sandwich exp sandwich)
  (if (null? (exp:results exp))
      (set! (exp:results exp)
            (list (cons sandwich #f64(-1 -1))))
   (set! (exp:results exp)
         (map (lambda (record)
                (cons sandwich
                      (cdr record)))
              (exp:results exp)))))

(define (matrix-norm A)
  "Find ||A||_1 norm for a row-major matrix."
  (+ (max (vector-ref A 0)
          (vector-ref A 2))
     (max (vector-ref A 1)
          (vector-ref A 3))))

(define* (random-matrix #:optional (range 1.))
  (list->vector (map (lambda (i)
                       (random range)) (iota 4))))

(define (matrix+ A B)
  (list->vector (map + (vector->list A) (vector->list B))))

(define (plot-sandwich exp random-list outfile count I)
  (let ((results 
         (append-map! 
          (lambda (random) 
            (map (lambda (i)
                   (let* ((R (random-matrix random))
                          (I* (matrix+ I R))
                          (fitness (begin (substitute-sandwich exp I*)
                                          (run-individual exp 0))))
                     (list R fitness)))
                 (iota count)))
          random-list)))
    (call-with-output-file outfile 
      (lambda (port)
        (format port "~a" (sexp->mathematica results))))))

(define (main)
  (set! args (option-ref options '() '()))
  (set! argc (length args))

  (unless (= 1 argc)
    (usage)
    (exit 2))

  (set! expmt (read-experiment (car args)))
  (if (option-ref options 'physics #f)
      (begin
        (set! physics-class 
              (eval (read-from-string (option-ref options 'physics #f)) (interaction-environment)))
        (set! (exp:physics-class expmt) physics-class))
      (set! physics-class (exp:physics-class expmt)))
  (format #t "Physics class is ~a.~%" physics-class)
  (when (option-ref options 'sandwich #f)
          (substitute-sandwich 
           expmt 
           (read-from-string (option-ref options 'sandwich #f))))
  (if (not (null? (exp:results expmt)))
      (begin
        (when (option-ref options 'sandwich-outfile #f)
         (plot-sandwich expmt 
                        (read-from-string 
                         (option-ref options 'sandwich-random "(1.)"))
                        (option-ref options 'sandwich-outfile #f)
                        10
                        (read-from-string
                         (option-ref options 'sandwich "#(1 0 0 1)"))
                        ))
        (run-individual expmt 0)
        (install-individual expmt 0)
        (when (option-ref options 'quit #f)
          (exit 0))
        )
      (begin 
        (format (current-error-port) "error: This experiment does not have any successful genomes.~%")
        (exit 1)
        ))

  (add-hook! emacsy-initialize-hook 
             (lambda ()
               (format #t "Running initialize hook.")
               ;(toggle-pause)
               (toggle-render)
               ;(reset-fode)
                                        ;(set! eval-beer-robot eval-beer-robot-render)
               ;(left-right-task)
               (format #t "Fitness from experiment is ~a.~%" 
                       (cdar (exp:results expmt)))
               (format #t "Physics class is ~a.~%" physics-class)
               ;; I can't draw it. Why?
                                        ;(eval-beer-robot-render current-genome)
                                        ;(exit 0)
               )
             #t))

(call-with-error-handling
 (lambda ()
   (main)))
