(use-modules 
 (ice-9 rdelim)
 (ice-9 getopt-long)
 (experiment)
 (experiment-transition)
 (guile-user)
 (eval-robot)
 (emacsy emacsy)
 (system repl error-handling))

(format #t "args ~a~%" (program-arguments))

(define args (program-arguments))
(define argc (length args))

(define option-spec
  '((physics (single-char #\p) (value #t))
    (help    (single-char #\h) (value #f))))

(define (usage)
  (format (current-error-port) "usage: ~a [-p physics-class] <experiment.dat>~%" (car (program-arguments))))

(define options (getopt-long args option-spec #:stop-at-first-non-option #t))

(define exp #f)

(define (main)
  (set! args (option-ref options '() '()))
  (set! argc (length args))

  (unless (= 1 argc)
    (usage)
    (exit 2))

  (set! exp (read-experiment (car args)))
  (if (option-ref options 'physics #f)
      (set! physics-class (eval (option-ref options 'physics #f) (interaction-environment)))
      (set! physics-class (exp:physics-class exp)))
  (format #t "Physics class is ~a.~%" physics-class)
  (if (exp:succeeded? exp)
                                        ;(set! current-genome (caar (exp:results exp)))
      #;(let ((trans-params (eval (exp:transition-params exp) (interaction-environment))))
        (set! current-genome (exp:mc-genome exp))
        (set! make-effector-func 
            (make-make-transition-effector-func
             trans-params
             (caar (exp:results exp)) #;transition-genome
             ))
        (format #t "fitness: ~a~%" (left-right-task current-genome 
                                                    (map make-apply-IC (exp:ICs exp))
                                                    (caar (exp:results exp))))
        )
      (begin
        (run-individual exp 0)
        (install-individual exp 0))
      (begin (format (current-error-port) "error: This experiment did not succeed.")
             (exit 1)))

  (add-hook! emacsy-initialize-hook 
             (lambda ()
               ;(toggle-pause)
               ;(toggle-render)
               (reset-fode)
                                        ;(set! eval-beer-robot eval-beer-robot-render)
               ;;(left-right-task)
               (format #t "Fitness from experiment is ~a.~%" 
                       (cdar (exp:results exp)))
               (format #t "Physics class is ~a.~%" physics-class)
               ;; I can't draw it. Why?
                                        ;(eval-beer-robot-render current-genome)
                                        ;(exit 0)
               )
             #t))

(call-with-error-handling
 (lambda ()
   (main)))
