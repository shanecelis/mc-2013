#!/usr/bin/env guile \
--debug -e main -s 
!#
(use-modules (ice-9 getopt-long) 
             (experiment)
             (experiment-gen-count-vs-select-attn)
             (experiment-transition)
             (beer-initial-conditions)
             (beer-parameters)
             (emacsy util)
             (oop goops)
             (fode-physics)
             (bullet-physics)
             (oop goops save)
             (system repl error-handling)
             (eval-robot)
             )
;; UGH. beer-experiment.scm should be put into a module or migrated
;; into several modules more likely.
(load "beer-experiment.scm")

(define option-spec
  '())

#;(format #t "prog args ~a~%" (program-arguments))

(define (main args)
  (call-with-error-handling
   (lambda ()
     (let* ((options (getopt-long args option-spec #:stop-at-first-non-option #t))
            (args (option-ref options '() '()))
            (argc (length args)))
       (when (> 2 argc)
         (format #t "Usage: run-experiment <experiment-class> <filename> -- experiment args...~%")
         (format #t "exits with 0 if experiment succeeds, non-zero otherwise~%")
         (exit 2))
       (exit (if (exp:succeeded? 
                  (run-experiment 
                   (eval (read-from-string (car args)) (interaction-environment))
                   (cadr args)
                   (cons (car args) (cddr args))))
                 0
                 1))))))

(define* (run-experiment exp-class filename args)
  ;;(define exp-class <gen-count-vs-select-attn-trial>)
  ;;(define exp-class <gen-count-vs-select-attn-trial-easier>)
  (define exp #f)
  ;(define exp-class <gen-count-vs-select-attn-dummy>)
  (define trial-count 1 #;15
    ) ;;10
  (define (make-trial) 
    #;(make-instance exp-class 
                   #:task-count 5 
                   #:max-gen 3 ;; 100
                   #:max-speed 0.25
                   #:physics-class 
                   physics-class-arg
                   )
    (make-instance exp-class))
  

  #;(set! exp (make <gen-count-vs-select-attn>
                #:child-experiments
                (map (lambda (i) (make-trial)) (iota trial-count))))
  #;
  (set! exp (make <experiment-transition-parent>
              #:child-experiments
              (map (lambda (i) (make-trial)) (iota trial-count))))
  (set! exp (make-trial))
  (process-arguments! exp args)

  (generate-parameters! exp)
  ;(format #t "PARAMETERS: ~a~%" (exp:parameters exp))

  (run-experiment! exp)
  ;(format #t "DATA: ~a~%" (exp:data exp))

  (analyze-data! exp)
  ;(format #t "RESULTS: ~a~%" (exp:results exp))

  (save-experiment exp filename)
  exp)
