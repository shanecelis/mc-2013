#!/usr/local/bin/guile \

!#
(use-modules 
 (ice-9 rdelim)
 (ice-9 optargs)
 (ice-9 getopt-long)
 (experiment)
 (experiment-transition)
 (guile-user)
 (eval-robot)
 (emacsy emacsy)
 (system repl error-handling)
 (mathematica-aux)
 )

(define args (program-arguments))
(define argc (length args))

(define option-spec
  '((physics (single-char #\p) (value #t))
    (help    (single-char #\h) (value #f))
    (use-sandwich (single-char #\s) (value #f))
    (range   (single-char #\r) (value #t))
    ))

(define (usage)
  (format (current-error-port) "usage: ~a [-p physics-class] [-s] <experiment.dat> <count> <output.m>~%" 
          (car (program-arguments))))

(define options (getopt-long args option-spec #:stop-at-first-non-option #t))

(define expmt #f)

(define (substitute-sandwich expmt sandwich)
  (set! (exp:results expmt)
        (map (lambda (record)
               (cons sandwich
                     (cdr record)))
             (exp:results expmt))))

(define (substitute-genome expmt genome)
  (set! (exp:mc-genome expmt) genome))

(define (matrix-norm A)
  "Find ||A||_1 norm for a row-major matrix."
  (+ (max (vector-ref A 0)
          (vector-ref A 2))
     (max (vector-ref A 1)
          (vector-ref A 3))))

(define (random-gene)
  (- 1. (random 2.)))

(define* (random-matrix #:optional (range 1.))
  (list->vector (map (lambda (i)
                       (* range (random-gene))) (iota 4))))

(define* (random-vector #:optional (range 1.) (count 1))
  (list->vector (map (lambda (i)
                       (* range (random-gene))) (iota count))))

(define (matrix+ A B)
  (list->vector (map + (vector->list A) (vector->list B))))

(define (plot-random-sandwich outfile count range)
  (let ((results 
         (map (lambda (i)
                (let* ((R (random-matrix range))
                       (fitness (begin (substitute-sandwich expmt R)
                                       (run-individual expmt 0))))
                  (list R fitness)))
              (iota count))))
    (call-with-output-file outfile 
      (lambda (port)
        (format port "~a" (sexp->mathematica results))))))

(define (plot-random-genome outfile count range)
  (let ((results 
         (map 
          (lambda (i)
            (let* ((I #(1. 0. 0. 1.))
                   (R (random-vector range
                                     (array-length (exp:mc-genome expmt))))
                   (fitness 
                    (begin 
                      (substitute-sandwich expmt I)
                      (substitute-genome 
                       expmt R)
                      (run-individual expmt 0))))
              (list R fitness)))
          (iota count))))
    (call-with-output-file outfile 
      (lambda (port)
        (format port "~a" (sexp->mathematica results))))))

(define (main)
  (set! args (option-ref options '() '()))
  (set! argc (length args))

  (unless (= 3 argc)
    (usage)
    (exit 2))
  
  (set! expmt (read-experiment (car args)))
  
  (when (option-ref options 'physics #f)
    (set! physics-class 
          (eval (string->symbol (option-ref options 'physics #f)) (interaction-environment)))
    (set! (exp:physics-class expmt) physics-class))
  (format #t "Physics class is ~s.~%" physics-class)
  
  (let ((count (string->number (cadr args)))
        (output (caddr args))
        (range (read-from-string (option-ref options 'range "1.0"))))
    (format #t "count ~a~%" count)
    
    (if (option-ref options 'use-sandwich #f)
        (plot-random-sandwich output count range)
        (plot-random-genome output count range)))
  (exit 0))

(call-with-error-handling
 (lambda ()
   (main)))
